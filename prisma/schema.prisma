generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String    @unique
  password      String?
  image         String?
  role          String?   @default("user")
  emailVerified DateTime?
  accounts      Account[]
  donasi        Donasi[]
  sessions      Session[]
  comment       Comment[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sumbangan {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  title             String
  description       String
  kategori          String
  location          String
  isShow          Boolean?   @default(true)
  status_pengiriman String?   @default("menunggu")
  donasi            Donasi[]
  comment           Comment[]

  @@map("sumbangan")
}

model Donasi {
  id                String    @id @default(uuid())
  sumbanganId       String
  item              String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String?
  status_pengiriman String?   @default("menunggu")
  sumbangan         Sumbangan @relation(fields: [sumbanganId], references: [id], onDelete: Cascade)
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("donasi")
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  sumbanganId String
  sumbangan   Sumbangan @relation(fields: [sumbanganId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comment")
}
